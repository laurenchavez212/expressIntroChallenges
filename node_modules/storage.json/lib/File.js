var fs = require( "fs" );

var See = require( './See' );
var Get = require( './Get' );

var File = function File(){

    var $this = this;

    this.path = undefined;

    this.link = undefined;

    this.types = [ '.json' ];

    this.parent = undefined;

    this.filename = undefined;

    /**
     * Object containing properties assigned from segments of the provided filename.
     * @type {{
     *      stub: string,
     *      path: string,
     *      fold: string,
     *      file: string,
     *      name: string,
     *      type: string,
     *      prop: string,
     *      full: string,
     *      tiny: string,
     *      reset: Function,
     *      make: {encoding: string}
     * }}
     */
    this.info = {

        /**
         * @type {{ encoding: string }}
         * @default { encoding: 'utf8' }
         */
        make: { encoding: 'utf8' },

        /**
         * @type {string}
         * @default ""
         */
        _stub: '',

        /**
         * @type {string}
         * @default ""
         */
        _path: '',

        /**
         * @type {string}
         * @default ""
         */
        _fold: '',

        /**
         * @type {string}
         * @default ""
         */
        _file: '',

        /**
         * @type {string}
         * @default ""
         */
        _name: '',

        /**
         * @type {string}
         * @default ".json"
         */
        _type: '.json',

        /**
         * @type {string}
         * @default ""
         */
        _prop: '',

        /**
         * @type {string}
         * @default ""
         */
        _full: '',

        /**
         * @type {string}
         * @default ""
         */
        _tiny: '',

        /**
         * Asserts that a value has already been assigned to "_item"
         * @param item
         * @returns {boolean}
         */
        has: function( item ){
            var blank = item === 'type' ? '.json' : '';

            return $this.info.hasOwnProperty( '_' + item ) && $this.info[ '_' + item ] !== blank;
        },

        /**
         * Retrieve the value assigned to "_item"
         * @param {string} item
         * @returns {string}
         */
        get: function( item ){
            if( $this.info.hasOwnProperty( '_' + item )) return $this.info[ '_' + item ];
        },

        /**
         * Assign the "value" to the "_item"
         * @param {string} item
         * @param {string} value
         */
        set: function( item, value ){
            value = typeof value  === 'string' ? value : '';

            if( $this.info.hasOwnProperty( '_' + item )) $this.info[ '_' + item ] = value;
        },

        /**
         * Reset all "_item" properties to their default values.
         * @returns {File}
         */
        reset: function(){
            $this.info._stub = '';
            $this.info._path = '';
            $this.info._fold = '';
            $this.info._file = '';
            $this.info._prop = '';
            $this.info._full = '';
            $this.info._tiny = '';
            $this.info._type = '.json';

            return $this;
        },

        /**
         * @getter stub
         * @returns {string}
         */
        get stub(){
            if( ! $this.info.has( 'stub' ))
                $this.info.set( 'stub', $this.filename.indexOf( ':' ) !== -1 ? $this.filename.split( ':' )[ 0 ] : '' );

            return $this.info.get( 'stub' );
        },

        /**
         * @getter path
         * @returns {string}
         */
        get path(){
            if( ! $this.info.has( 'path' )){
                var folders = $this.filename.indexOf( '/' ) !== -1 ? $this.filename.split( '/' ) : [ '' ];

                folders.splice( folders.length -1, 1 );

                if( $this.info.stub !== '' ) folders.unshift( $this.path.resolved( $this.info.stub ));

                $this.info.set( 'path', $this.path.resolved( folders.join( '/' )));
            }

            return $this.info.get( 'path' );
        },

        /**
         * @getter stub
         * @returns {string}
         */
        get fold(){
            if( ! $this.info.has( 'fold' ) && $this.filename.indexOf( '/' ) !== -1 ){
                var folder = $this.filename.replace( $this.info.stub + ':', '' ).split( '/' );

                if( folder.length > 1 ) folder.splice( folder.length - 1, 1 );

                $this.info.set( 'fold', folder.length ? folder.join( '/' ) + '/' : '' );
            }

            return $this.info.get( 'fold' );
        },

        /**
         * @getter stub
         * @returns {string}
         */
        get file(){
            if( ! $this.info.has( 'file' ) && $this.filename[ $this.filename.length -1 ] !== '/' )
                $this.info.set( 'file', $this.filename.replace( $this.info.stub + ':', '' ).replace( $this.info.fold, '' ));

            return $this.info.get( 'file' );
        },

        /**
         * @getter name
         * @returns {string}
         */
        get name(){
            if( ! $this.info.has( 'name' ))
                $this.info.set( 'name', $this.info.file.split( '.' ).splice( 0, 1 )[ 0 ]);

            return $this.info.get( 'name' );
        },

        /**
         * @getter type
         * @returns {string}
         */
        get type(){
            if( ! $this.info.has( 'type' ))
                for( var key in Object.keys( $this.types ))
                    if( $this.info.file.indexOf( $this.types[ Object.keys( $this.types )[ key ]]) !== -1 )
                        $this.info.set( 'type', $this.types[ Object.keys( $this.types )[ key ]]);

            return $this.info.get( 'type' );
        },

        /**
         * @getter prop
         * @returns {string}
         */
        get prop(){
            if( ! $this.info.has( 'prop' )){
                var pieces = $this.info.file.replace( $this.info.type, '' ).split( '.' );

                pieces.splice( 0, 1 );

                $this.info.set( 'prop', pieces.length > 0 ? pieces.join( '.' ) : '' );
            }

            return $this.info.get( 'prop' );
        },

        /**
         * @getter full
         * @returns {string}
         */
        get full(){
            if( ! $this.info.has( 'full' ))
                $this.info.set( 'full', $this.info.path + $this.info.name + $this.info.type );

            return $this.info.get( 'full' );
        },

        /**
         * @getter tiny
         * @returns {string}
         */
        get tiny(){
            if( ! $this.info.has( 'tiny' ))
                $this.info.set( 'tiny', $this.path.stubbed( $this.info.path ) + $this.info.name + $this.info.type );

            return $this.info.get( 'tiny' );
        }
    };

    this.contents = {
        set string( string ){
            if( typeof string === 'object' && string !== null ) return $this.contents.object = string;

            if( typeof string !== 'string' ) throw new Error( 'Invalid Variable Type, Cannot write to file.' );

            try{
                var object = JSON.parse( string );
                string = JSON.stringify( object, null, 2 );
            } catch( e ){
                throw new Error( 'File contents must be a valid JSON string.' );
            }

            fs.writeFileSync( $this.info.full, string, $this.info.make );
        },

        set object( object ){
            if( typeof object === 'string' ) return $this.contents.string = object;

            if( typeof object !== 'object' || object === null ) throw new Error( 'Invalid Variable Type, Cannot write to file.' );

            try{
                var string = JSON.stringify( object, null, 2 );

                $this.contents.string = string && string.length ? string : "{}";
            } catch( e ){
                throw new Error( 'Invalid Variable Type, Cannot write to file.' );
            }
        },

        get string(){
            var string = fs.readFileSync( $this.insist(), $this.info.make );

            string = string && typeof string === 'string' ? string : "{}";

            try{ JSON.parse( string ); }
            catch( e ){ throw new Error( 'Cannot read JSON from file: "' + $this.info.full + '"' ); }

            return string;
        },

        get object(){
            var object = JSON.parse( $this.contents.string );

            object = typeof object === 'object' && object !== null ? object : {};

            return object;
        }
    };

    this.exists = function(){
        try {
            return fs.lstatSync( $this.info.full ).isFile();
        } catch (e){
            return false;
        }
    };

    this.insist = function(){
        if( ! $this.exists()){
            var createIfNotFound = $this.info.fold.split( '/' ).filter( function( piece ){ return piece !== '' });

            $this.path.insist( $this.info.path, createIfNotFound );

            $this.make();
        }

        return $this.info.full;
    };

    this.desist = function(){
        if( $this.exists()){
            $this.kill();

            var removeIfEmpty = $this.info.fold.split( '/' ).filter( function( piece ){ return piece !== '' });

            $this.path.desist( $this.info.path, removeIfEmpty );
        }

        return $this.info.full;
    };

    this.make = function(){
        fs.openSync( $this.info.full, 'w' );

        return $this;
    };

    this.kill = function(){
        fs.unlinkSync( $this.info.full );

        return $this.info.reset();
    };

    this.wipe = function(){
        $this.contents.object = {};

        return $this.contents.object;
    };

    this.read = function( revert ){
        var contents = $this.contents.object

        if( $this.info.prop === '' ) return contents === undefined ? revert : contents;

        var value = Get( contents ).get( $this.info.prop );

        return value === undefined ? revert : value;
    }

    this.push = function( value ){
        var contents = $this.contents.object;

        $this.contents.object = Get( $this.contents.object ).set( $this.info.prop, value );

        return $this.contents.object;
    };

    this.pull = function( revert ){
        var altered = Get( $this.contents.object );

        var value = altered.del( $this.info.prop );

        $this.contents.object = altered;

        return value === undefined ? revert : value;
    };

    this.bind = function(){
        if( $this.parent ){
            $this.path = $this.parent.path;
            $this.filename = $this.parent._file;

            return $this.info.reset();
        }

        return $this;
    };

    return $this;
};

module.exports = function( storage ){
    var file = new File();

    if( storage && storage.constructor && storage.constructor.name === "Storage" ) file.parent = storage;

    return file.bind();
};
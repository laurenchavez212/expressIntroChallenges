var EventEmitter = require( "events" ).EventEmitter;

function isObject( object ){ return Object.prototype.toString.call( object ) === '[object Object]'; };
function isString( string ){ return Object.prototype.toString.call( string ) === '[object String]'; };
function isArray( array ){ return Object.prototype.toString.call( array ) === '[object Array]'; };

var object_flatten = function( object, layer, flat ){
    flat = flat || {};
    layer = layer || '';

    var keys = isObject( object ) ? Object.keys( object ) : [];

    for( var key in Object.keys( keys )){
        var property = keys[ Object.keys( keys )[ key ]];
        var currentLayer = layer === '' ? property : layer + '.' + property;

        if( ! isObject( object[ property ])){
            flat[ currentLayer ] = object[ property ];
        } else if( Object.keys( object[ property ]).length > 0 ){
            flat = object_flatten( object[ property ], currentLayer, flat );

            flat[ currentLayer ] = object[ property ];
        }
    }

    return flat;
};

var object_inflate = function( object ){
    var keys = isObject( object ) ? Object.keys( object ) : [];

    for( var key in Object.keys( keys )){
        var property = keys[ Object.keys( keys )[ key ]];

        if( property.indexOf( '.' ) !== -1 ){
            var further_layers = property.split( '.' );
            var current_layer = further_layers.splice( 0, 1 );

            if( further_layers.length > 0 ){
                object[ current_layer ] = object_include( object[ current_layer ], further_layers.join( '.' ), object[ property ]);

                delete object[ property ];
            } else{
                object[ current_layer ] = object[ property ];
            }
        }
    }

    return object;
};

var object_include = function( object, dot_prop, value ){
    object = isObject( object ) ? object : {};

    if( ! isObject( object ) && isObject( value )) return value;

    var layers = dot_prop.split( '.' );
    dot_prop = layers.splice( 0, 1 )[ 0 ];

    object[ dot_prop ] = layers.length === 0 ? value : object_include( object[ dot_prop ], layers.join( '.' ), value );

    return object;
};

var object_exclude = function( object, dot_prop ){
    object = object || {};

    if( object[ dot_prop ] !== undefined ) delete object[ dot_prop ];

    if( dot_prop.indexOf( '.' ) !== -1 ){
        var further_layers = dot_prop.split( '.' );
        var current_layer = further_layers.splice( 0, 1 )[ 0 ];

        if( ! isObject( object[ current_layer ])) return object[ current_layer ];

        object[ current_layer ] = object_exclude( object[ current_layer ], further_layers.join( '.' ));
    }

    return object;
};

var object_combine = function( object, withObject, overwrite ){
    if( typeof object === 'object' && typeof withObject === 'object' ){
        for( var index in Object.keys( withObject )){
            var property = Object.keys( withObject )[ index ];
            if( object.hasOwnProperty( property )){
                if( isObject( object[ property ]) && isObject( withObject[ property ])){
                    object[ property ] = object_combine( object[ property ], withObject[ property ], overwrite );
                } else if( overwrite === true ){
                    object[ property ] = withObject[ property ];
                }
            } else{
                object[ property ] = withObject[ property ];
            }
        }
    }

    return object;
};

var object_disjoin = function( object, keys ){
    keys = isObject( keys ) ? Object.keys( keys ) : keys;
    keys = isString( keys ) ? [ keys ] : keys;
    keys = isArray( keys ) ? keys : [];

    var results = {
        marked: new Obj({}),
        unmarked: new Obj({})
    };

    for( var key in Object.keys( object )){
        var property = Object.keys( object )[ key ];

        var status = keys.indexOf( property ) === -1 ? 'unmarked' : 'marked';

        results[ status ].set( property, object[ property ]);
    }

    return results;
};

var Obj = function Obj( object ){
    var $this;

    this.to = function( format ){
        if( format === 'json' || format === 'JSON' ) return JSON.stringify( this, null, 2 );
        if( format === 'string' || format === 'String' ) return JSON.stringify( this );

        return this;
    };

    this.properties = function(){
        var properties = Object.keys( this );

        return properties;
    };

    this.values = function(){
        var values = [];

        for( var key in this.properties()) values.push( this[ this.properties()[ key ]])

        return values;
    };

    this.deflate = function(){
        var object = object_flatten( this );

        for( var key in Object.keys( object )) this[ Object.keys( object )[ key ]] = object[ Object.keys( object )[ key ]];

        return this;
    };

    this.inflate = function(){
        var object = object_inflate( this );

        for( var k in Object.keys( this )) if( object[ Object.keys( this )[ k ]] === undefined ) delete this[ Object.keys( this )[ k ]];

        for( var key in Object.keys( object )) this[ Object.keys( object )[ key ]] = object[ Object.keys( object )[ key ]];

        return this;
    };

    this.dig = function( callback, dotProp, value ){
        this.deflate();

        var results = callback( this, dotProp, value );

        this.inflate();

        return results;
    };

    this.has = function( dot_prop ){
        return this.dig( function( $this, dot_prop ){
            return Object.keys( $this ).indexOf( dot_prop ) !== -1;
        }, dot_prop );
    };

    this.get = function( dot_prop, revert ){
        return this.dig( function( $this, dot_prop ){
            if( $this[ dot_prop ] !== undefined ) return $this[ dot_prop ];

            return revert;
        }, dot_prop, revert );
    };

    this.set = function( dot_prop, value ){
        return this.dig( function( $this, dot_prop, value ){
            var keys = Object.keys( $this );

            for( var key in keys )
                if( keys[ key ].indexOf( dot_prop ) === 0 )
                    delete $this[ keys[ key ]];

            $this[ dot_prop ] = value;

            return $this;
        }, dot_prop, value );
    };

    this.del = function( dot_prop ){
        var value = this.get( dot_prop );

        var $this = this.dig( function( $this, dot_prop ){
            var keys = Object.keys( $this )

            for( var k in keys ){
                if( keys[ k ].indexOf( dot_prop ) === 0 ){
                    delete $this[ keys[ k ]];
                    delete $this[ dot_prop.split( '.' )[ 0 ]];
                }
            }

            return $this;
        }, dot_prop );

        for( var key in Object.keys( this )){
            var property = Object.keys( this )[ key ];

            if( $this[ property ] === undefined ) delete this[ property ];
            else this[ property ] = $this[ property ];
        }

        return value;
    };

    this.cut = function( dot_prop ){
        var split = this.dig( function( $this, dot_prop ){
            if( isString( dot_prop )) dot_prop = [ dot_prop ];

            for( var k in Object.keys( dot_prop )){
                var prop = isArray( dot_prop ) ? dot_prop[ Object.keys( dot_prop )[ k ]] : Object.keys( dot_prop )[ k ];

                if( prop.indexOf( '.' ) !== -1 ) delete $this[ prop.split( '.' )[ 0 ]];
            }

            $this.emit( 'change', $this );

            return object_disjoin( $this, dot_prop );
        }, dot_prop );

        var props = this.properties();

        for( var key in props ){
            var property = props[ key ];

            if( Object.keys( split.marked ).indexOf( property ) !== -1 ) delete this[ property ];
            if( Object.keys( split.unmarked ).indexOf( property ) !== -1 ) this[ property ] = split.unmarked[ property ];
        }

        return split.marked;
    };

    this.mix = function( object, overwrite ){
        return this.dig( function( $this, object ){
            var flat = object_flatten( object );
            var result = object_combine( $this, flat, overwrite );

            for( var key in Object.keys( result )) this[ Object.keys( result )[ key ]] = result[ Object.keys( result )[ key ]];

            return $this;
        }, object );
    };

    this.init = function( object ){
        $this = Object.create( object_combine( this, EventEmitter.prototype ));

        for( var key in Object.keys( object ))
            $this[ Object.keys( object )[ key ]] = object[ Object.keys( object )[ key ]];

        return $this;
    };

    return this.init( object );
};

var Str = function Str( string ){
    //TODO build Str object
};

var Arr = function Arr( array ){
    //TODO build Arr object
};

module.exports = function( variable ){
    if( isObject( variable )) return new Obj( variable );
    if( isString( variable )) return new Str( variable ); //TODO read it if it's JSON and convert it to an object or array
    if( isArray( variable )) return new Arr( variable );

    return variable;
};
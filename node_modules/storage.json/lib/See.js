var Reader = function Reader( variable ){
    var $this = this;

    this.type;

    this._type;

    this.value;

    this.is = {
        not: {},

        nan: function(){
            return $this.type === 'NaN';
        },

        zero: function(){
            return $this.value === 0;
        },

        null: function(){
            return $this.type === 'Null';
        },

        undefined: function(){
            return $this.type === 'Undefined';
        },

        defined: function(){
            return $this.type !== 'Undefined';
        },

        json: function(){
            if( ! $this.is.string()) return false;

            try{ JSON.parse( $this.value ); }
            catch(e){ return false; }

            return true;
        },

        string: function(){
            return $this.type === 'String';
        },

        number: function(){
            return $this.type === 'Number';
        },

        object: function(){
            return $this.type === 'Object';
        },

        array: function(){
            return $this.type === 'Array';
        },

        boolean: function(){
            return $this.type === 'Boolean';
        },

        function: function(){
            return $this.type === 'Function';
        },

        class: function( Class ){
            return $this.type === 'Object' && $this.value.constructor && $this.value.constructor.name && $this.value.constructor.name === Class;
        },

        actually: function( compare ){
            return $this.value === compare;
        }
    };

    this.as = {
        json: function( spaces ){
            spaces = spaces > 0 ? spaces : 2;

            if( $this.is.object() || $this.is.array()) return JSON.stringify( $this.value, null, spaces );

            throw new Error( 'Cannot convert "' + $this.type + '" to JSON.' );
        },

        string: function(){
            if( $this.is.json() || $this.is.string()) return $this.value;

            if( $this.is.zero()) return '0';

            if( $this.is.null()) return 'null';

            if( ! $this.is.defined()) return 'undefined';

            if( $this.is.number()) return $this.value.toString();

            if( $this.is.boolean()) return $this.value === true ? 'true' : 'false';

            if( $this.is.array() || $this.is.object()) return $this.as.json();

            throw new Error( 'Cannot convert "' + $this.type + '" to String.' );
        },

        object: function(){
            if( $this.is.object()) return $this.value;

            var object = {};
            var parsed = $this.is.json() ? JSON.parse( $this.value ) : $this.value;
            var type = $this._type( parsed );

            if( type === 'Object' ) return parsed;

            if( type === 'Array' ){
                for( var k in Object.keys( parsed ))
                    object[ Object.keys( parsed )[ k ].toString()] = parsed[ Object.keys( parsed )[ k ]];

                return object;
            }

            throw new Error( 'Cannot convert "' + $this.type + '" to Object.' );
        },

        array: function( keysOrValues ){
            keysOrValues = keysOrValues === 'keys' ? keysOrValues : 'values';

            if( $this.is.array()) return keysOrValues === 'keys' ? Object.keys( $this.value ) : $this.value;

            var fromObject = function( object, keysOrValues ){
                var keys = Object.keys( object );

                if( keysOrValues === 'keys' ) return keys;

                var values = [];

                for( var key in keys ) values.push( object[ keys[ key ]]);

                return values;
            };

            var fromString = function( string, keysOrValues ){
                try{
                    string = JSON.parse( string );

                    if( $this._type( string ) === 'Array' ) return keysOrValues === 'keys' ? Object.keys( string ) : string;

                    if( $this._type( string ) === 'Object' ) return fromObject( string, keysOrValues );
                } catch( e ){
                    return keysOrValues === 'keys' ? Object.keys([ string ]) : [ string ];
                }

                return keysOrValues === 'keys' ? Object.keys([ string ]) : [ string ];
            };

            if( $this.is.string()) return fromString( $this.value, keysOrValues );
            if( $this.is.object()) return fromObject( $this.value, keysOrValues );

            throw new Error( 'Cannot convert the "' + $this.type + '" into an Array.' );
        }
    };

    this.parsed = function(){
        return $this.is.json() ? JSON.parse( $this.value ) : $this.value;
    };

    this._type = function( variable ){
        var type = Object.prototype.toString.call( variable ).replace( '[object ', '' ).replace( ']', '' );

        return type === 'Number' && isNaN( variable ) ? 'NaN' : type;
    };

    this.equals = function( compare ){
        var compareType = $this._type( compare );

        if( $this.type !== compareType ) return false;

        if( $this.is.object() || $this.is.array()){
            var passedProps = Object.getOwnPropertyNames( $this.value );
            var compareProps = Object.getOwnPropertyNames( compare );

            if ( passedProps.length != compareProps.length ) return false;

            for( var item in passedProps )
                if ( compare[ passedProps[ item ]] && JSON.stringify( $this.value[ passedProps[ item ]]) !== JSON.stringify( compare[ passedProps[ item ]]))
                    return false;

            return true;
        }

        if( $this.type === 'NaN' && compareType === 'NaN' ) return true;

        return $this.value === compare;
    };

    this.contains = function( subset ){
        if( $this._type( subset ) === 'String' ){
            if( $this.is.string() || $this.is.array()) return $this.value.indexOf( subset ) !== -1;

            if( $this.is.object())
                for( var key in Object.keys( $this.value ))
                    if( $this.value[ Object.keys( $this.value )[ key ]] === subset ) return true;

            return false;
        }

        if( $this._type( subset ) === 'Array' ){
            if( $this.is.string() || $this.is.array())
                for( var key in Object.keys( subset )) if( $this.value.indexOf( subset[ Object.keys( subset )[ key ]]) === -1 ) return false;

            if( $this.is.object()) for( var key in Object.keys( subset )){
                var found = false;
                var val = subset[ Object.keys( subset )[ key ]];

                for( var key in Object.keys( $this.value ))
                    if( ! found && $this.value[ Object.keys( $this.value )[ key ]] === val ) found = true;

                if( ! found ) return false;
            }
        }

        if( $this._type( subset ) === 'Object' ){
            if( $this.is.string()) return false;

            if( $this.is.array() || $this.is.object()) for( var key in Object.keys( $this.value )){
                var val = $this.is.array() ? $this.value[ Object.keys( $this.value )[ key ]] : $this.value;

                if( $this._type( val ) !== 'Object' ) return false;

                for( var k in Object.keys( subset ))
                    if( val[ Object.keys( subset )[ k ]] === undefined ) return false;

                return true;
            }
        }

        throw new Error( '"contains" completed without returning true of false' );
    };

    this.bind = function( variable ){
        $this.value = variable;
        $this.type = $this._type( variable );

        for( var key in Object.keys( $this.is ))
            if([ 'actually', 'class', 'not' ].indexOf( Object.keys( $this.is )[ key ]) === -1 )
                $this.is.not[ Object.keys( $this.is )[ key ]] = function(){ return ! $this.is[ Object.keys( $this.is )[ key ]]; }

        $this.is.not.class = function( Class ){ return ! $this.is.class( Class ); }
        $this.is.not.actually = function( compare ){ return ! $this.is.actually( compare ); }

        return $this;
    };

    return $this.bind( variable );
};

var See = function See( variable ){
    var $this = this;

    this.type;

    this._type;

    this.value;

    this.primary;

    this.as = {};

    this.is = { not: {}};

    this.readers = { and: [], or: []};

    this.are = { not: {}, equal: function(){ return $this.equal( $this.primary.value ); }};

    this.equals = function( value ){
        return $this.anyEqual( value ) && $this.allEqual( value ) ? true : false;
    };

    this.equal = function( value ){
        return $this.equals( value );
    };

    this.hasOr = function(){
        return $this.readers.or.length > 0;
    };

    this.getOr = function(){
        return $this.hasOr() ? $this.readers.or : [];
    };

    this.hasAnd = function(){
        return $this.readers.and.length > 0;
    };

    this.getAnd = function(){
        return $this.hasAnd() ? $this.readers.and : [];
    };

    this.allEqual = function( value ){
        var results = [];

        for( var key in Object.keys( $this.getAnd()))
            results.push( $this.getAnd()[ Object.keys( $this.getAnd())[ key ]].equals( value ));

        return results.indexOf( false ) === -1;
    };

    this.anyEqual = function( value ){
        for( var key in Object.keys( $this.getOr()))
            if( $this.getOr()[ Object.keys( $this.getOr())[ key ]].equals( value ) === false ) return false;

        return true;
    };

    this.allMatch = function( type, argument ){
        var readers = $this.getAnd();

        var results = [];
        for( var key in Object.keys( readers )){
            var reader = readers[ Object.keys( readers )[ key ]];

            if( typeof reader.is[ type ] !== 'function' )
                throw new Error( 'The "See" Helper, cannot assert that all of the variables are: "' + type.toUpperCase() + '"' );

            results.push( reader.is[ type ]( argument ) ? 'true' : 'false');
        }

        return results.indexOf( 'false' ) === -1;
    };

    this.anyMatch = function( type, argument ){
        var readers = $this.getOr();

        if( $this.hasOr()){
            for( var key in Object.keys( readers )){
                var reader = readers[ Object.keys( readers )[ key ]];

                if( typeof reader.is[ type ] !== 'function' )
                    throw new Error( 'The "See" Helper, cannot assert that any of the variables are: "' + type.toUpperCase() + '"' );

                if( ! reader.is[ type ]( argument )) return false;
            }
        }

        return true;
    };

    this.init = function( variable ){
        var primary = new Reader( variable );

        $this.value = variable;
        $this.type = primary.type;
        $this._type = primary._type;

        return primary;
    }

    this.boot = function( variable ){
        $this.primary = $this.init( variable );

        var buildMatchChecker = function( type ){
            $this.is[ type ] = function( argument ){
                return $this.anyMatch( type, argument ) && $this.allMatch( type, argument );
            };

            $this.is.not[ type ] = function( argument ){
                return ! $this.is[ type ]( argument );
            };

            $this.are[ type ] = $this.is[ type ];
            $this.are.not[ type ] = $this.is.not[ type ];

            if([ 'string', 'number', 'object', 'array', 'boolean', 'function' ].indexOf( type ) !== -1 ){
                $this.are[ type + 's' ] = $this.are[ type ];
                $this.are.not[ type + 's' ] = $this.are.not[ type ];
            }

            return $this;
        }

        for( var key in Object.keys( $this.primary.is )) $this = buildMatchChecker( Object.keys( $this.primary.is )[ key ])

        $this.as.string = function(){ return $this.primary.as.string(); };
        $this.as.object = function(){ return $this.primary.as.object(); };

        $this.as.json = function( spaces ){ return $this.primary.as.json( spaces ); };
        $this.as.array = function( keysOrValues ){ return $this.primary.as.array( keysOrValues ); };

        return $this;
    };

    this.or = function( variable ){
        return $this.bind( variable, 'or' );
    };

    this.and = function( variable ){
        return $this.bind( variable, 'and' );
    };

    this.bind = function( variable, combiner ){
        combiner = [ 'and', 'or' ].indexOf( combiner ) !== -1 ? combiner : 'or';

        if( $this.readers.and.length === 0 && $this.readers.or.length === 0 ) $this = $this.boot( variable );

        if( combiner === 'and' && $this.readers.or.length > 0 ) $this.readers.and.push( $this.readers.or.splice( $this.readers.or.length -1, 1 ));

        $this.readers[ combiner ].push( new Reader( variable ));

        return $this;
    };

    return $this.bind( variable );
};

module.exports = function( variable ){
    return new See( variable );
};
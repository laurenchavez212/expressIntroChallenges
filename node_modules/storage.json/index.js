var path = require( "path" );

var See = require( './lib/See' );
var Get = require( './lib/Get' );
var File = require( "./lib/File" );
var Path = require( "./lib/Path" );

//USAGE:
//
// var data = Storage( "filename" );
//
// TODO WORK ON ALL THIS STUFF LATER!!
// data.something = "whatever" //TODO this should change the file
// var something = data.something //TODO this should match the file
//
// when the file is changed, any data set using the file should also change
//

/**
 * Handles storage of trivial data within JSON files.
 * @param file
 * @param options
 * @returns {Object}
 * @constructor
 */
function Storage( file ){
    var $this = this;

    this.is = { not: {}};

    this.path = undefined;

    this.file = undefined;

    this._path = undefined;

    this._file = undefined;

    this.util = { See: See, Get: Get, };

    this.get = function( revert ){
        return $this.file.read( revert );
    };

    this.set = function( value ){
        $this.file.push( value );

        return $this;
    };

    this.del = function( revert ){
        return $this.file.pull( revert );
    },

    this.see = function(){
        return See( $this.get());
    };

    this.mix = function( object ){
        var mixed = Get( $this.file.contents.object ).mix( object );

        return mixed;
    }

    /**
     * Initialize the Storage instance and bind it to the file.
     * @param file
     * @param options
     * @returns {Object}
     */
    this.bind = function( file ){
        $this._path = {
            app: path.resolve( process.cwd()),
            root: path.resolve( './' ),
            storage: path.resolve( __dirname )
        };

        $this.path = $this.path === undefined ? Path( $this ) : $this.path;

        $this._file = typeof file === 'string' ? file : false;
        $this.file = !! $this._file ? File( $this ) : false;

        return $this;
    };

    return $this.bind( file );
};


module.exports = function( file ){
    return new Storage( file );
};